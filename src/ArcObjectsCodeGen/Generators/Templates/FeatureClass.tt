<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#@ parameter name="context" type="ArcObjectsCodeGen.AoGenerators.Templates.FeatureClassTemplateContext" #>
<#
//
// This file was generated by the ArcObjectsCodeGen tool.
//
#>
using System;
using ESRI.ArcGIS.esriSystem;
using ESRI.ArcGIS.Geodatabase;
using ESRI.ArcGIS.Geometry;
using System.Diagnostics.CodeAnalysis;
using ArcObjectsCodeGen.Runtime;

<#
// TODOs: Create ITable if needed.
#>
namespace <#= context.Namespace #>
{
    /// <summary>
    /// Helpers for <#= context.HumanFriendlyDatasetType.ToLower() #> <#= context.TableName #>.
    /// </summary>
    [SuppressMessage("Style", "IDE1006:Naming Styles", Justification = "Generated code")]
    public partial class <#= context.ClassName #>
    {
        /// <summary><#= context.HumanFriendlyDatasetType #> name</summary>
        public const string Name = "<#= context.TableName #>";

        /// <summary>Original spatial reference of spatial class serialized base-64 encoded.</summary>
        private static string s_OriginalSpatialReferenceSerialized =
          "<#= context.SerializedSpatialReference #>";

        private static ISpatialReference s_OriginalSpatialReference;

        /// <summary>The original spatial reference of this class when generating source code.</summary>
        public static ISpatialReference OriginalSpatialReference =>
          AoSerializationHelpers.DeserializeViaIPersistStream<ISpatialReference>(s_OriginalSpatialReferenceSerialized);

        /// <summary>UID of feature extension class or null (EXTCLSID)</summary>
        public static readonly UID EXTCLSID = <#= context.EXTCLSID_Construct #>;

        /// <summary>
        /// Creates the feature class using original spatial reference (<see cref="OriginalSpatialReference"/>)
        /// and original extension class ID (<see cref="EXTCLSID"/>).
        /// </summary>
        public static <#= context.InterfaceName #> Create(IFeatureWorkspace fws) => Create(fws, OriginalSpatialReference);

        /// <summary>
        /// Creates the feature class using CUSTOM spatial reference and original extension class ID (<see cref="EXTCLSID"/>).
        /// </summary>
        public static <#= context.InterfaceName #> Create(IFeatureWorkspace fws, ISpatialReference spatialReference) =>
          Create(fws, spatialReference, EXTCLSID);

        /// <summary>
        /// Creates the feature class using CUSTOM spatial reference and CUSTOM extension class ID.
        /// (You can pass null to <paramref name="extensionCLSID"/> to clear existing feature class extension class ID).
        /// </summary>
        public static <#= context.InterfaceName #> Create(IFeatureWorkspace fws, ISpatialReference spatialReference, UID extensionCLSID)
        {
          if (fws is null)
            throw new ArgumentNullException(nameof(fws));
          if (spatialReference is null)
            throw new ArgumentNullException(nameof(spatialReference));

          IFields fields = CreateFields(spatialReference);
          var CLSID = <#= context.CLSID_Construct #>;
          var featureClass = fws.CreateFeatureClass(Name, fields, CLSID, extensionCLSID, esriFeatureType.<#= context.FeatureTypeString #>, "<#= context.ShapeFieldName #>", ConfigKeyword: "");
          return featureClass;
        }

      #region Implementation

      static IFields CreateFields(ISpatialReference spatialReference)
      {
        IFieldsEdit fields = new FieldsClass();

        <# foreach (var fieldDef in context.FieldDefinitions)
        { #>
          {
             IFieldEdit fieldEdit = new FieldClass();

             fieldEdit.Name_2 = "<#= fieldDef.Name #>";
             fieldEdit.AliasName_2 = "<#= fieldDef.AliasName #>";
             fieldEdit.Type_2 = esriFieldType.<#= fieldDef.TypeString #>;
             fieldEdit.DefaultValue_2 = <#= context.ObjectToLiteral(fieldDef.DefaultValue) #>;
             <#
             // TODO: Domain, DomainFixed.
             #>
             fieldEdit.Editable_2 = <#= context.ObjectToLiteral(fieldDef.IsEditable) #>;
             fieldEdit.IsNullable_2 = <#= context.ObjectToLiteral(fieldDef.IsNullable) #>;
             fieldEdit.Required_2 = <#= context.ObjectToLiteral(fieldDef.IsRequired) #>;
             fieldEdit.Length_2 = <#= fieldDef.Length #>;
             fieldEdit.Precision_2 = <#= fieldDef.Precision #>;
             fieldEdit.Scale_2 = <#= fieldDef.Scale #>;

             <# if (fieldDef.TypeString == "esriFieldTypeGeometry")
             {
                var geometry = fieldDef.GeometryDefinition;
             #>
                IGeometryDefEdit geometryDefEdit = new GeometryDefClass();
                geometryDefEdit.GeometryType_2 = esriGeometryType.<#= geometry.GeometryTypeString #>;
                geometryDefEdit.SpatialReference_2 = spatialReference;
                fieldEdit.GeometryDef_2 = geometryDefEdit;
             <# } #>

             fields.AddField(fieldEdit);
          }
        <# } #>

        return fields;
      }

      #endregion
    }

    /// <summary>
    /// Data object class for <#= context.HumanFriendlyDatasetType.ToLower() #> <#= context.TableName #>.
    /// Contains getters and setters for record fields.
    /// </summary>
    [SuppressMessage("Style", "IDE1006:Naming Styles", Justification = "Generated code")]
    public partial class <#= context.DataObjectClassName #>
    {
        <# foreach (var fieldDef in context.FieldDefinitions)
        { #>
          /// <summary><#= fieldDef.AliasName #></summary>
          public virtual <#= fieldDef.CSharpType #> <#= fieldDef.Name #> { get; set; }
        <# } #>
    }

    /// <summary>
    /// Reader/writer for data access objects over <#= context.TableName #>.
    /// Can be used over IRow/IRowBuffer.
    /// </summary>
    [SuppressMessage("Style", "IDE1006:Naming Styles", Justification = "Generated code")]
    public partial class <#= context.DataObjectClassName #>RowReaderWriter
    {
        private bool m_GettersInitialized;
        private bool m_SettersInitialized;

        // Getters
      <# foreach (var fieldDef in context.FieldDefinitions)
      { #>
        /// <summary>Gets field <#= fieldDef.AliasName #></summary>
        private FieldGetter<<#= fieldDef.CSharpType #>> m_Get<#= fieldDef.Name #>;
      <# } #>

        // Setters (Only for editable fields)
      <# foreach (var fieldDef in context.FieldDefinitions.Where(f => f.IsEditable))
      { #>
        /// <summary>Sets field <#= fieldDef.AliasName #></summary>
        private FieldSetter<<#= fieldDef.CSharpType #>> m_Set<#= fieldDef.Name #>;
      <# } #>

      /// <summary>
      /// Creates an instance of <#= context.DataObjectClassName #> class and reads all available fields from <paramref name="rowBuffer" /> to it.
      /// </summary>
      public <#= context.DataObjectClassName #> ReadFromRow(IRowBuffer rowBuffer)
      {
			  if (rowBuffer is null)
				  throw new ArgumentNullException(nameof(rowBuffer));

			  var result = new <#= context.DataObjectClassName #>();
			  GetFields(rowBuffer, result);
			  return result;
      }

		  /// <summary>
		  /// Writes field values from <paramref name="dataObject"/> to <paramref name="rowBuffer" />.
		  /// </summary>
		  public void WriteToRow(IRowBuffer rowBuffer, <#= context.DataObjectClassName #> dataObject)
		  {
			  if (rowBuffer is null)
				  throw new ArgumentNullException(nameof(rowBuffer));
			  if (dataObject is null)
				  throw new ArgumentNullException(nameof(dataObject));

			  SetFields(rowBuffer, dataObject);
		  }
      <# // TODO: virtual OnBeforeInsert, OnAfterInsert ... #>

		  #region Implementation

		  private void GetFields(IRowBuffer rowBuffer, <#= context.DataObjectClassName #> dataObject)
		  {
			  if (!m_GettersInitialized)
				  InitGetters(rowBuffer);

        <# foreach (var fieldDef in context.FieldDefinitions)
        { #>
			  if (m_Get<#= fieldDef.Name #> is not null)
			      dataObject.<#= fieldDef.Name #> = m_Get<#= fieldDef.Name #>.GetValue(rowBuffer);
        <# } #>
		  }

		  private void InitGetters(IRowBuffer rowBuffer)
		  {
			    IFields fields = rowBuffer.Fields;

			    int fieldsCount = fields.FieldCount;
			    for (int fieldIdx = 0; fieldIdx < fieldsCount; fieldIdx++)
			    {
				    IField field = fields.get_Field(fieldIdx);
					  string fieldName = field.Name;

              if (field.Type == esriFieldType.esriFieldTypeOID)
                m_GetObjectID = new FieldGetter<int>(fieldIdx);
              else if (field.Type == esriFieldType.esriFieldTypeGeometry)
                m_GetShape = new FieldGetter<<#= context.GeometryInterface #>>(fieldIdx);
            <# foreach (var fieldDef in context.FieldDefinitions.Where(f => !f.IsObjectID && !f.IsShape))
            { #>
			        else if ((fieldName.Equals("<#= fieldDef.Name #>", StringComparison.OrdinalIgnoreCase)))
			          m_Get<#= fieldDef.Name #> = new FieldGetter<<#= fieldDef.CSharpType #>>(fieldIdx);
            <#
            } #>
					    else
						    throw new ArgumentException($"Unknown field name: {fieldName}");
			    }

          m_GettersInitialized = true;
		  }

      private void SetFields(IRowBuffer rowBuffer, <#= context.DataObjectClassName #> dataObject)
      {
			  if (!m_SettersInitialized)
				  InitSetters(rowBuffer);

        <# foreach (var fieldDef in context.FieldDefinitions.Where(f => f.IsEditable))
        { #>
        m_Set<#= fieldDef.Name #>?.SetValue(rowBuffer, dataObject.<#= fieldDef.Name #>);
        <# } #>
      }

		  private void InitSetters(IRowBuffer rowBuffer)
		  {
			    IFields fields = rowBuffer.Fields;

			    int fieldsCount = fields.FieldCount;
			    for (int fieldIdx = 0; fieldIdx < fieldsCount; fieldIdx++)
			    {
				    IField field = fields.get_Field(fieldIdx);
				    string fieldName = field.Name;

            if (field.Type == esriFieldType.esriFieldTypeGeometry)
              m_SetShape = new FieldSetter<<#= context.GeometryInterface #>>(fieldIdx);
            <# foreach (var fieldDef in context.FieldDefinitions.Where(f => f.IsEditable && !f.IsShape))
            { #>
			      else if ((fieldName.Equals("<#= fieldDef.Name #>", StringComparison.OrdinalIgnoreCase)))
			          m_Set<#= fieldDef.Name #> = new FieldSetter<<#= fieldDef.CSharpType #>>(fieldIdx);
            <#
            } #>
			    }

          m_SettersInitialized = true;
		  }

      private class FieldGetter<T>
      {
        int m_FieldIndex;

        public FieldGetter(int fieldIndex)
        {
          m_FieldIndex = fieldIndex;
        }

        public T GetValue(IRowBuffer rowBuffer)
        {
          object rawValue = rowBuffer.get_Value(m_FieldIndex);
          if (DBNull.Value.Equals(rawValue))
            return default;

          if (rawValue is string str && typeof(T) == typeof(Guid))
          {
            rawValue = new Guid(str);
          }
          else if (rawValue is IClone clone)
          {
            rawValue = clone.Clone(); // avoid "recycling" issues
          }

          return (T)rawValue;
        }
      }

      private class FieldSetter<T>
      {
        int m_FieldIndex;

        public FieldSetter(int fieldIndex)
        {
          m_FieldIndex = fieldIndex;
        }

        public void SetValue(IRowBuffer rowBuffer, T value)
        {
          object rawValue = value;
          if (rawValue is null)
            rawValue = DBNull.Value;

          if (rawValue is IClone clone)
            rawValue = clone.Clone(); // avoid "recycling" issues

          // Workaround for esri WTFs: COMException (0x80040907): Geometry cannot have Z values.
          // https://gis.stackexchange.com/a/269233/5834
          if (rawValue is IZAware zAwareRawValue && zAwareRawValue.ZAware && !rowBuffer.Fields.Field[m_FieldIndex].GeometryDef.HasZ)
            zAwareRawValue.ZAware = false;

          rowBuffer.set_Value(m_FieldIndex, rawValue);
        }
      }

		  #endregion
    }
}
